Лабораторная работа №2
_______________________

Замечания.

1. Проект в IDE (Eclipse, IDEA) должен иметь название Task2.

2. Дополнительно в корневом пакете создать класс Demo, который демонстрирует работу всех заданий.

3. Код не должен содержать консольный ввод (чтение из консоли).

4. Соблюдать code convention.

5. Каждое из заданий должно быть независимым приложением, имеющим метод main.
Содержимое методов Circle.main; Matrix.main; ListImpl.main, а также результат их работы см. в приложении.

6. В третьем задании обратите внимание на обобщение типов.

_______________________

Вопросы на допуск.

1. Что такое перекрытие метода, перегрузка.
2. Что такое полиморфизм, как его реализовать.
3. Существует ли множественное наследование в Java?
4. Какие типы могут быть унаследованы?
5. Что такое наследование, ключевые слова implements, extends.
6. Что такое инкапсуляция, для чего предназначена, как реализовать.
7. Ключевое слово final, контексты использования.
8. Конструкторы, их назначение и отличие от методов.
9. Ограничение при перекрытии метода.
10. Блоки инициализации, какие бывают.
11. Укажите порядок вызова конструкторов, блоков инициализации при создании объекта.
12. Вложенные классы, анонимные классы, написать пример.
13. В чем отличие вложенных типов от внутренних, привести примеры из ядра.

_______________________

Ход выполнения работы.

1. Создать интерфейсы и реализовать все классы, которые требуются.
2. Написать класс Demo.

Когда будет дан доступ к репозиторию дополнительно сделать следующее:
3. Привязать проект к нужному узлу в репозитории и сделать коммит проекта в репозиторий.
4. Коммит не пройдет, если среди файлов, помещаемых в репозиторий, будет хотя бы один class-файл, таким образом следует class-файлы из комита исключить.
5. В обязательном порядке в репозиторий должны быть помещены метафайлы IDE (для Eclipse файл .project; для IDEA файл Task2.iml).
6. Добиться сборки проекта в Jenkins (после каждого коммита в репозиторий Jenkins пересобирает проект, если проект не был собран, то причину можно посмотреть в логах сборки).
7. Оптимизировать метрики проекта в Sonar (количество Blocker/Critical/Major isuues должно быть 0, метрика RCI как можно ближе к 100%).

_______________________

Задание 1
-------------------------------------------------------
Название класса: ua.nure.yourlastname.task2.Сircle
-------------------------------------------------------

Реализовать класс Circle, который поставлен в соответствие геометрической фигуре окружность.


Поля класса:
-------------------------------------------------------
// координаты центра окружности
private double x;
private double y;

// радиус окружности
double r;
-------------------------------------------------------


Конструкторы класса:
-------------------------------------------------------
public Cirlce(double x, double y, double r) { ... }
-------------------------------------------------------


Методы класса:
-------------------------------------------------------
// передвинуть окружность на dx и dy:
public void move(double dx, double dy) { ... }

// проверить попадание заданной точки внутрь данной окружности:
public boolean isInside(double x, double y) { ... }

// проверить попадание другой окружности внутрь данной
public boolean isInside(Circle c) { ... }

// вывести на экран параметры окружности
public void print() { ... }
-------------------------------------------------------


Создать метод main, который демонстрирует работу всех методов класса.

_______________________

Задание 2
-------------------------------------------------------
Название класса: ua.nure.yourlastname.task2.Matrix
-------------------------------------------------------

Реализовать класс, который поставлен в соответствие такому математическому объекту, как матрица.


Поля класса.
-------------------------------------------------------
// двумерный массив вещественных чисел, который хранит элементы матрицы
private double[rows][cols] ar;

// количество строк и столбцов в матрице
private int rows;
private int cols;
-------------------------------------------------------


Конструкторы класса:
-------------------------------------------------------
public Matrix(double[][] ar) { ... }
-------------------------------------------------------


Методы класса:
-------------------------------------------------------
// сложение с другой матрицей
public void add(Matrix m) { ... }

// умножение на число
public void mul(double x) { ... }

// умножение на другую матрицу
public void mul(Matrix m) { ... }

// транспонирование
public void transpose() { ... }

// печать матрицы на экран (построчно, элементы выводит через пробел)
public void print() { ... }
-------------------------------------------------------


Создать метод main, который демонстрирует работу всех методов класса.

_______________________

Задание 3
-------------------------------------------------------
Названия типов верхнего уровня:
ua.nure.yourlastname.task2.List
ua.nure.yourlastname.task2.ListImpl
ua.nure.yourlastname.task2.Iterator
-------------------------------------------------------


(1) Определить интерфейс List следующего содержания:
-------------------------------------------------------
public interface List<E> {
    // Appends the specified element to the end of this list
    void add(E el);
 
    // Appends all of the elements in the specified collection to the end of this list
    void addAll(List<? extends E> list);
 
    // Removes all of the elements from this list
    void clear();
 
    // Returns true if this list contains the specified element
    boolean contains(Object el);
 
    // Returns the element at the specified position in this list.
    E get(int index); 
 
    // Returns the index of the first occurrence of the specified element in this list
    // (use an equals method to find first occurrence)
    int indexOf(Object el);
 
    // Removes the element at the specified position in this list, 
    // returns the element previously at the specified position
    // Throws IndexOutOfBoundsException if the index is out of range
    Object remove(int index);
 
    // Removes the first occurrence of the specified element from this list,
    // returns true if this list contained the specified element
    boolean remove(Object el);
 
    // Returns the number of elements in this list
    int size();
}
-------------------------------------------------------


(2) Создать класс ListImpl, который реализует интерфейс List:
-------------------------------------------------------
public class ListImpl<E> implements List<E> { 
    public ListImpl() { ... } 
    ... 
}
-------------------------------------------------------


(3) Определить интерфейс Iterator, унаследовав его от java.util.Iterator:
-------------------------------------------------------
public interface Iterator<E> extends java.util.Iterator<E> {
 
    // returns true if the iteration has more elements
    boolean hasNext();
 
    // returns the next element in the iteration
    E next();
 
    // removes the last element returned by this iterator
    // this method can be called only once per call to next()
    // method throws IllegalStateException if:
    // (1) the next method has not yet been called, or
    // (2) the remove method has already been called after 
    // the last call to the next method
    void remove();
}
-------------------------------------------------------


(4) Добавить к интерфейсу List наследование интерфейса java.lang.Iterable:
-------------------------------------------------------
public interface List<E> extends java.lang.Iterable<E> {
     ...
    // returns an iterator
    Iterator<E> iterator();
}
-------------------------------------------------------


(5) Реализовать метод iterator в классе ListImpl внутренним классом Itr.


(6) Перекрыть в классе ListImpl метод toString, следующим образом:
если list содержит элементы E, E2, ..., En
то list.toString вернет строку
-------------------------------------------------------
{E.toString(), E2.toString(), ..., En.toString()}
-------------------------------------------------------


(7) Создать метод main, который демонстрирует работу всех методов класса ListImpl.
